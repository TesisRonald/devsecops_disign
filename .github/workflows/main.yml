name: Deploy to App Runner
on:
  push:
      branches-ignore:
      - main
      - library
      - Microservicio-producto
  #   branches: [main] # Trigger workflow on git push to main branch
  # workflow_dispatch: # Allow manual invocation of the workflow
env:
  MY_IMAGE: services:services-tag

jobs: 
  scan:
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Print current directory contents
        run: ls -la & pwd
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts
          GITLEAKS_CONFIG: '/home/runner/work/devsecops_disign/devsecops_disign/gitleaks.toml'
            
  testCalidad-Unitaria:
    needs: scan
    runs-on: ubuntu-latest
    name: testCalidad-Unitaria
    steps:
    - name: checkout source repo
      uses: actions/checkout@main

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


    - name: linting
      uses: programmingwithalex/pylinter@main
      with:
        python-root: '.'
        flake8-flags: ''
        mypy-flags: ''
        fail-on-isort: false
        skip-flake8: false
        # skip-mypy: false
        # skip-isort: false
        # mypy-ignore-dirs-files: ''
        requirements-file: 'requirements.txt'

    - name: commit isort changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A && git diff-index --cached --quiet HEAD || git commit -m 'isort'

    - name: push isort changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        branch: ${{ github.ref }}
    - name: Test with pytest
      run: |
        if [ -d tests ] || [ -d test ]; then python -m pytest; fi
  sonarcloud:
    name: SonarCloud
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Los clones superficiales deben deshabilitarse para una mejor relevancia del análisis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.qualitygate.wait=false
            -Dsonar.qualitygate.timeout=300
          # -Dsonar.scanner.force-deprecated-java-version=true -X
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
        
      
  ci:
    runs-on: ubuntu-latest
    needs: [testCalidad-Unitaria, sonarcloud]
    name: docker&DockerScout&OwaspZap
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.MY_IMAGE }} .
      - name: setuptools
        run: |
          docker image ls
      #     pip uninstall -y setuptools
      #     pip install setuptools==65.5.1
      #     pip show setuptools
      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@main
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.MY_IMAGE }}
          only-severities: critical,high
          exit-code: true      
      - name: Run product container
        run: |
          docker run -d -p 5000:5000 -u myuser ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.MY_IMAGE }}
      # - name: Install Inso and run Insomnia test
      #   uses: kong/setup-inso@v1
      #   with:
      #     inso-version: 3.5.0
      # - run: inso run test --testName "Verify GET /products" --env "Development"
      - name: Run OWASP ZAP scan  
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: "http://localhost:5000"
          cmd_options: "-a"
      - name: Push
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.MY_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
    
    steps:      
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
          
      - name: Iniciar sesión en AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}      

      - name: Recuperar imagen desde Docker Hub
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.MY_IMAGE }}

      - name: Etiquetar y enviar imagen a Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: design-devsecops
          IMAGE_TAG: ${{ env.MY_IMAGE }
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.MY_IMAGE }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

 