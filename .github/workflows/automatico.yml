name: GitGuardian scan

on: [push, pull_request]

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0

      - name: Merge current branch into main
        run: |
          git config --global user.name 'rvquichimbo'
          git config --global user.email 'ronal1923@gmail.com'
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          git merge origin/$BRANCH_NAME --no-edit
          git push feature
       
    



          
  # ci:
  #   runs-on: ubuntu-latest
  #   name: docker
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/venceya:my-image-tag
  #     - name: Docker Scout
  #       id: docker-scout
  #       uses: docker/scout-action@main
  #       with:
  #         command: cves
  #         image: ${{ secrets.DOCKERHUB_USERNAME }}/venceya:my-image-tag
  #         only-severities: critical,high
  #         exit-code: true
  #     - name: Run product container
  #       run: |
  #         docker run -d -p 5000:5000 -w /app/services ${{ secrets.DOCKERHUB_USERNAME }}/venceya:my-image-tag flask run --host=0.0.0.0
  #     - name: Run OWASP ZAP scan
  #       uses: zaproxy/action-baseline@v0.4.0
  #       with:
  #         target: "http://127.0.0.1:5000"
  #         cmd_options: "-a"
          
          
          
          # Replace with the URL of the site you want to


# - name: Set environment variables
#   run: |
#     branch_name=${GITHUB_REF#refs/heads/}
#     echo "MICROSERVICE_PATH=$branch_name/services" >> $GITHUB_ENV
#     echo "MICROSERVICE_PORT=5000" >> $GITHUB_ENV

# - name: Run container
#   run: |
#     docker run -d -p $MICROSERVICE_PORT:$MICROSERVICE_PORT -v ${{ github.workspace }}/$MICROSERVICE_PATH:/app ${{ secrets.DOCKERHUB_USERNAME }}/venceya:my-image-tag



      # - name: Build Docker image
      #   run: docker build -t microservices .
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Push Docker image to Docker Hub
      #   run: docker push microservices
  # zap_scan:
  #   runs-on: ubuntu-latest
  #   name: Scan the webapplication
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         ref: master
  #     - name: ZAP Scan
  #       uses: zaproxy/action-full-scan@v0.5.1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         docker_name: 'owasp/zap2docker-stable'
  #         target: 'https://www.zaproxy.org/'
  #         rules_file_name: '.zap/rules.tsv'
  #         cmd_options: '-a'
  # sonarcloud:
  #   name: SonarCloud
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0  # Los clones superficiales deben deshabilitarse para una mejor relevancia del anÃ¡lisis
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       with:
  #         args: >
  #           -Dsonar.qualitygate.wait=true
  #           -Dsonar.qualitygate.timeout=300 
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
  # scan:
  #   name: gitleaks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.
  # python-lint:
  #   needs: scan
  #   runs-on: ubuntu-latest
  #   name: CI workflow
  #   steps:
  #   - name: checkout source repo
  #     uses: actions/checkout@main

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8 pytest
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi


  #   - name: linting
  #     uses: programmingwithalex/pylinter@main
  #     with:
  #       python-root: '.'
  #       flake8-flags: ''
  #       mypy-flags: ''
  #       fail-on-isort: false
  #       skip-flake8: false
  #       # skip-mypy: false
  #       # skip-isort: false
  #       # mypy-ignore-dirs-files: ''
  #       requirements-file: 'requirements.txt'

  #   - name: commit isort changes
  #     run: |
  #       git config --local user.email "action@github.com"
  #       git config --local user.name "GitHub Action"
  #       git add -A && git diff-index --cached --quiet HEAD || git commit -m 'isort'

  #   - name: push isort changes
  #     uses: ad-m/github-push-action@master
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       branch: ${{ github.ref }}
  #   - name: Test with pytest
  #     run: |
  #       if [ -d tests ] || [ -d test ]; then python -m pytest; fi